{{#composedSchemas}}{{^oneOf}}{{^not}}{{^anyOf}}{{^allOf.2}}{{#allOf}}{{>make-result}}{{/allOf}}{{/allOf.2}}{{#allOf.2.name}}void *result = reinterpret_cast<void*>({{<is-optional}}{{$yes}}result_from.has_value()?(&result_from.value()):nullptr{{/yes}}{{$no}}&result_from{{/no}}{{/is-optional}});{{/allOf.2.name}}{{/anyOf}}{{^allOf}}{{^anyOf.2}}{{#anyOf}}{{>make-result}}{{/anyOf}}{{/anyOf.2}}{{^anyOf.3}}{{#anyOf.2.isString}}{{#anyOf.1.isEnum}}const char *result = {{<is-optional}}{{$yes}}result_from.has_value()?result_from.value().getString().c_str():nullptr{{/yes}}{{$no}}result_from.getString().c_str(){{/no}}{{/is-optional}};{{/anyOf.1.isEnum}}{{/anyOf.2.isString}}{{^anyOf.1.isEnum}}void *result = reinterpret_cast<void*>({{<is-optional}}{{$yes}}result_from.has_value()?(&result_from.value()):nullptr{{/yes}}{{$no}}&result_from{{/no}}{{/is-optional}});{{/anyOf.1.isEnum}}{{^anyOf.2.isString}}{{#anyOf.1.isEnum}}void *result = reinterpret_cast<void*>({{<is-optional}}{{$yes}}result_from.has_value()?(&result_from.value()):nullptr{{/yes}}{{$no}}&result_from{{/no}}{{/is-optional}});{{/anyOf.1.isEnum}}{{/anyOf.2.isString}}{{/anyOf.3}}{{#anyOf.3.name}}void *result = reinterpret_cast<void*>({{<is-optional}}{{$yes}}result_from.has_value()?(&result_from.value()):nullptr{{/yes}}{{$no}}&result_from{{/no}}{{/is-optional}});{{/anyOf.3.name}}{{/allOf}}{{/not}}{{/oneOf}}{{/composedSchemas}}{{^composedSchemas}}{{#isContainer}}{{#isArray}}ogs_list_t *result = reinterpret_cast<ogs_list_t*>({{<is-optional}}{{$yes}}result_from.has_value()?{{/yes}}{{/is-optional}}ogs_calloc(1, sizeof(*result)){{<is-optional}}{{$yes}}:nullptr{{/yes}}{{/is-optional}});
{{<is-optional}}{{$yes}}if (result_from.has_value()) {
{{/yes}}{{/is-optional}}
typedef typename ResultFromType{{<is-optional}}{{$yes}}::value_type{{/yes}}{{/is-optional}}::value_type ItemType;
for (const ItemType &item : result_from{{<is-optional}}{{$yes}}.value(){{/yes}}{{/is-optional}}) {
    data_collection_lnode_t *node = nullptr;
    {{#items}}{{#isString}}node = {{<is-optional}}{{$yes}}item.has_value()?{{/yes}}{{/is-optional}}data_collection_lnode_create(data_collection_strdup(item{{<is-optional}}{{$yes}}.value(){{/yes}}{{/is-optional}}.c_str()), reinterpret_cast<void(*)(void*)>(_ogs_free)){{<is-optional}}{{$yes}}:nullptr{{/yes}}{{/is-optional}};
    {{/isString}}{{^isString}}{{#isAnyType}}{{<is-optional}}{{$yes}}if (item.has_value()) {
        {{/yes}}{{/is-optional}}void *item_obj = reinterpret_cast<void*>(new std::shared_ptr<AnyType>(item{{<is-optional}}{{$yes}}.value(){{/yes}}{{/is-optional}}));
    node = data_collection_lnode_create(item_obj, reinterpret_cast<void(*)(void*)>(data_collection_model_any_type_free));{{<is-optional}}{{$yes}}
    }{{/yes}}{{/is-optional}}{{/isAnyType}}{{^isAnyType}}{{#isContainer}}{{<is-optional}}{{$yes}}if (item.has_value()) {{/yes}}{{/is-optional}}{
    const ItemType &result_from = item{{<is-optional}}{{$yes}}.value(){{/yes}}{{/is-optional}};
    typedef ItemType ResultFromType;
    {{>make-result}}
    if (result) node = data_collection_lnode_create(result, reinterpret_cast<void(*)(void*)>({{#isMap}}data_collection_hash_free{{/isMap}}{{#isArray}}data_collection_list_free{{/isArray}}));
}{{/isContainer}}{{^isContainer}}{{#isPrimitiveType}}{{dataType}} *item_obj = reinterpret_cast<{{dataType}}*>({{<is-optional}}{{$yes}}item.has_value()?{{/yes}}{{/is-optional}}ogs_malloc(sizeof(*item_obj)){{<is-optional}}{{$yes}}:nullptr{{/yes}}{{/is-optional}});
    if (item_obj) {
        *item_obj = item{{<is-optional}}{{$yes}}.value(){{/yes}}{{/is-optional}};
        node = data_collection_lnode_create(item_obj, reinterpret_cast<void(*)(void*)>(_ogs_free));
    }{{/isPrimitiveType}}{{^isPrimitiveType}}data_collection_model_{{#lambda.lowercase}}{{#lambda.snakecase}}{{{complexType}}}{{/lambda.snakecase}}{{/lambda.lowercase}}_t *item_obj = reinterpret_cast<data_collection_model_{{#lambda.lowercase}}{{#lambda.snakecase}}{{{complexType}}}{{/lambda.snakecase}}{{/lambda.lowercase}}_t*>({{<is-optional}}{{$yes}}item.has_value()?{{/yes}}{{/is-optional}}new std::shared_ptr<{{{complexType}}} >(item{{<is-optional}}{{$yes}}.value(){{/yes}}{{/is-optional}}){{<is-optional}}{{$yes}}:nullptr{{/yes}}{{/is-optional}});
    if (item_obj) {
	node = data_collection_model_{{#lambda.lowercase}}{{#lambda.snakecase}}{{{complexType}}}{{/lambda.snakecase}}{{/lambda.lowercase}}_make_lnode(item_obj);
    }{{/isPrimitiveType}}{{/isContainer}}{{/isAnyType}}
    {{/isString}}{{/items}}
    if (node) ogs_list_add(result, node);
}{{<is-optional}}{{$yes}}
}{{/yes}}{{/is-optional}}{{/isArray}}{{#isMap}}ogs_hash_t *result = {{<is-optional}}{{$yes}}result_from.has_value()?{{/yes}}{{/is-optional}}ogs_hash_make(){{<is-optional}}{{$yes}}:nullptr{{/yes}}{{/is-optional}};
if (result) {
    for (const auto &item : result_from{{<is-optional}}{{$yes}}.value(){{/yes}}{{/is-optional}}) {
{{#items}}{{#isString}}        char *item_obj = {{<is-optional}}{{$yes}}item.second.has_value()?{{/yes}}{{/is-optional}}data_collection_strdup(item.second.{{<is-optional}}{{$yes}}value().{{/yes}}{{/is-optional}}c_str()){{<is-optional}}{{$yes}}:nullptr{{/yes}}{{/is-optional}};
{{/isString}}{{^isString}}{{#isAnyType}}        void *item_obj = reinterpret_cast<void*>({{<is-optional}}{{$yes}}item.second.has_value()?{{/yes}}{{/is-optional}}new std::shared_ptr<AnyType>(item.second{{<is-optional}}{{$yes}}.value(){{/yes}}{{/is-optional}}){{<is-optional}}{{$yes}}:nullptr{{/yes}}{{/is-optional}});{{/isAnyType}}{{^isAnyType}}        {{#isContainer}}{{#isMap}}ogs_hash_t{{/isMap}}{{#isArray}}ogs_list_t{{/isArray}}{{/isContainer}}{{^isContainer}}data_collection_model_{{#lambda.lowercase}}{{#lambda.snakecase}}{{{complexType}}}{{/lambda.snakecase}}{{/lambda.lowercase}}_t{{/isContainer}} *item_obj{{#isContainer}} = nullptr;
{{<is-optional}}{{$yes}}        if (item.second.has_value()) {
{{/yes}}{{/is-optional}}
        typedef typename ResultFromType{{<is-optional}}{{$yes}}::value_type{{/yes}}{{/is-optional}}::mapped_type ItemType;
        {
            const auto &result_from = item.second;
            typedef ItemType ResultFromType;
            {{>make-result}}
            item_obj = result;
        }
{{<is-optional}}{{$yes}}        }
{{/yes}}{{/is-optional}}{{/isContainer}}{{^isContainer}} = reinterpret_cast<data_collection_model_{{#lambda.lowercase}}{{#lambda.snakecase}}{{{complexType}}}{{/lambda.snakecase}}{{/lambda.lowercase}}_t*>({{<is-optional}}{{$yes}}item.second.has_value()?{{/yes}}{{/is-optional}}new std::shared_ptr<{{{complexType}}} >(item.second{{<is-optional}}{{$yes}}.value(){{/yes}}{{/is-optional}}){{<is-optional}}{{$yes}}:nullptr{{/yes}}{{/is-optional}});{{/isContainer}}{{/isAnyType}}
{{/isString}}{{/items}}
        if (item_obj) ogs_hash_set(result, item.first.c_str(), OGS_HASH_KEY_STRING, item_obj);
    }
}{{/isMap}}{{/isContainer}}{{^isContainer}}{{#isPrimitiveType}}const ResultFromType{{<is-optional}}{{$yes}}::value_type{{/yes}}{{/is-optional}} result = {{<is-optional}}{{$yes}}result_from.has_value()?{{/yes}}{{/is-optional}}result_from{{<is-optional}}{{$yes}}.value():ResultFromType::value_type(){{/yes}}{{/is-optional}};{{/isPrimitiveType}}{{^isPrimitiveType}}{{#isString}}const char *result = {{<is-optional}}{{$yes}}result_from.has_value()?result_from.value().c_str():nullptr{{/yes}}{{$no}}result_from.c_str(){{/no}}{{/is-optional}};{{/isString}}{{#isDate}}const char *result = {{<is-optional}}{{$yes}}result_from.has_value()?result_from.value().c_str():nullptr{{/yes}}{{$no}}result_from.c_str(){{/no}}{{/is-optional}};{{/isDate}}{{#isDateTime}}const char *result = {{<is-optional}}{{$yes}}result_from.has_value()?result_from.value().c_str():nullptr{{/yes}}{{$no}}result_from.c_str(){{/no}}{{/is-optional}};{{/isDateTime}}{{#isByteArray}}const unsigned char *result = {{<is-optional}}{{$yes}}result_from.has_value()?result_from.value().c_str():nullptr{{/yes}}{{$no}}result_from.c_str(){{/no}}{{/is-optional}};{{/isByteArray}}{{^isString}}{{^isDate}}{{^isDateTime}}{{^isByteArray}}const data_collection_model_{{#lambda.lowercase}}{{#lambda.snakecase}}{{{datatype}}}{{/lambda.snakecase}}{{/lambda.lowercase}}_t *result = reinterpret_cast<const data_collection_model_{{#lambda.lowercase}}{{#lambda.snakecase}}{{{datatype}}}{{/lambda.snakecase}}{{/lambda.lowercase}}_t*>({{<is-optional}}{{$yes}}result_from.has_value()?&result_from.value():nullptr{{/yes}}{{$no}}&result_from{{/no}}{{/is-optional}});{{/isByteArray}}{{/isDateTime}}{{/isDate}}{{/isString}}{{/isPrimitiveType}}{{/isContainer}}{{/composedSchemas}}